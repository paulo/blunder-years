package BankServer;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.rmi.*;
import java.rmi.server.*;
import java.io.*;
/**
 *
 * @author Dias
 */
//Dont know if this implements TransactionServer??
public class BankServer extends UnicastRemoteObject {
     private static String dbURL = "jdbc:derby:testDB;create=true";
    // jdbc Connection
    private static Connection conn = null;
    private static Statement stmt = null;
    
    
    
    public BankServer () throws RemoteException
    {
        super();
    }
    private static void createConnection()
    {     
        try
        {
            
            Class.forName("org.apache.derby.jdbc.ClientDriver").newInstance();
            //Get a connection
             conn = DriverManager.getConnection(dbURL); 
        }
        catch (Exception except)
        {
            except.printStackTrace();
        }
    }
    
    //NÃ£o se deveria criar uma interface para este metodos?
    public static int receiveFromBank() throws RemoteException {
        return 1;
    }

    private static void initTServerConnection() throws RemoteException {
    }

    private static void initDBConnection() throws RemoteException{
    }   
       
       
   


     private static void shutdown()
    {
        try
        {
            if (stmt != null)
            {
                stmt.close();
            }
            if (conn != null)
            {
                DriverManager.getConnection(dbURL + ";shutdown=true");
                conn.close();
            }           
        }
        catch (SQLException sqlExcept)
        {
            
        }
     
    }
     
      public static void main(String[] args) throws Exception
    {
        createConnection();
        // Assign a security manager, in the event that dynamic
	// classes are loaded
        if (System.getSecurityManager() == null)
            System.setSecurityManager ( new RMISecurityManager() );

        // Create an instance of our power service server ...
        BankServer svr = new BankServer();

        // ... and bind it with the RMI Registry
        Naming.bind ("BankServer", svr);

        System.out.println ("Service bound....");
        //shutdown();
    }
}
