Grupos de 3.
Entrega: 4 de Dezembro de 2015.
Relatório até 6 páginas.
Necessário entregar source code.
Actors e message-orientation, através de Quasar e ZeroMQ.

---

Chat server com:
    - Registo/remoção e login/logout de utilizadores (name e password).
    - Escolha/mudança de sala (partindo de salas existentes). 
    - Envio de mensagens privadas para outros utilizadores conectados.
    - Protocolo de texto simples para ser possivel usar telnet.
    - API para gestão e descrição (criação/remoção/listagem de salas, listagem de utilizadores, etc)
    - API de notificações que permite subscrever a eventos relevantes (criação/remoção de sala, login/logout de utilizador na sala, etc)

    .deve ser escalável no número de utilizadores conectados.
    .deve permitir subscrição de eventos notáveis.

Clientes (3 clientes)
    - cliente chat para utilizadores (permite listagem de salas, escolha de salas e listagem de utilizadores)
    - cliente admin para gerir (criar/remover/listar) salas
    - consola de notificação (permite observar o sistema subscrevendo a eventos relevantes)








Notas:
    - Channels
        - Selectors para esperar dois canais ao mesmo tempo
        - Map, Reduce para aplicar operações ás mensagens recibidas
        - BufferSize para definir o máximo de mensagens que podem estar no buffer
    - Clustering (meter roomManagers em diferentes computadores)?
    - Register actors (torná-los acessiveis em toda a rede, talvez dê jeito)
    - Dataflow reactive programming (recalcular variáveis quando ocorre um evento)
    - Supervisors
        - Talvez fazer meter o user a fazer watch do seu line reader e vice-versa
    - Behaviors
        - RequestReplyHelper
        - BehaviorActor
        - Server
        - Proxy Server (capaz de se tornar útil no servidor)
        - Event Source 
        - FiniteStateMachineActor (talvez usar isto para depois fazer refactoring do código)

Ver exemplos de testes de código





comandos de registo, mudança de sala, login, logout, etc...
organizar código



gradle run -Dmyargs="12344"
    -> Usar isto para depois criar vários servidores ao mesmo tempo.

ter em conta a mailbox e mailbox policy




Perguntar ao prof até que ponto o roomManager está a ser demasiado carregado... talvez criar um actor proprio para tratar das mensagens privadas




Simão:
    - fazer error control na main
    - no linereader, é preciso controlar os erros de quando nao ha argumentos suficientes para construir a mensagem



leaveroom
changeroom
enterroom

linereader x
user
usermanager
roommanager
room


A fazer:
    Meter para apenas mandar para um room mas para poder receber de vários (é preciso mudar change room também)
    Arranjar lógica de mudança de sala (não sai da sala, apenas fica a escrever para outra)
    Arranjar lógica de saida de sala (se sair de todas as salas, vai para a sala global)
    Só sai da sala global por proprio comando
    Se estiver numa sala e sair dela, recebe uma mensagem a dizer que nao escolheu a sala para onde escrever.
    Meter funcionalidade de que salas está a receber


A faltar:
    Controlo de erros para quando não esta loggedin ou registado
    Se o user nao estiver loggedout, nao pode fazer logout



é preciso sincronizar diversos objetos




