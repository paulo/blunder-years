Grupos de 3.
Entrega: 4 de Dezembro de 2015.
Relatório até 6 páginas.
Necessário entregar source code.
Actors e message-orientation, através de Quasar e ZeroMQ.

---

Chat server com:
    - Registo/remoção e login/logout de utilizadores (name e password).
    - Escolha/mudança de sala (partindo de salas existentes). 
    - Envio de mensagens privadas para outros utilizadores conectados.
    - Protocolo de texto simples para ser possivel usar telnet.
    - API para gestão e descrição (criação/remoção/listagem de salas, listagem de utilizadores, etc)
    - API de notificações que permite subscrever a eventos relevantes (criação/remoção de sala, login/logout de utilizador na sala, etc)

    .deve ser escalável no número de utilizadores conectados.
    .deve permitir subscrição de eventos notáveis.

Clientes (3 clientes)
    - cliente chat para utilizadores (permite listagem de salas, escolha de salas e listagem de utilizadores)
    - cliente admin para gerir (criar/remover/listar) salas
    - consola de notificação (permite observar o sistema subscrevendo a eventos relevantes)








Notas:
    - Channels
        - Selectors para esperar dois canais ao mesmo tempo
        - Map, Reduce para aplicar operações ás mensagens recibidas
        - BufferSize para definir o máximo de mensagens que podem estar no buffer
    - Clustering (meter roomManagers em diferentes computadores)?
    - Register actors (torná-los acessiveis em toda a rede, talvez dê jeito)
    - Dataflow reactive programming (recalcular variáveis quando ocorre um evento)
    - Supervisors
        - Talvez fazer meter o user a fazer watch do seu line reader e vice-versa
    - Behaviors
        - RequestReplyHelper
        - BehaviorActor
        - Server
        - Proxy Server (capaz de se tornar útil no servidor)
        - Event Source 
        - FiniteStateMachineActor (talvez usar isto para depois fazer refactoring do código)

Ver exemplos de testes de código







gradle run -Dmyargs="12344"
    -> Usar isto para depois criar vários servidores ao mesmo tempo.

ter em conta a mailbox e mailbox policy


A fazer:
   - Arranjar main para ser possivel criar várias instancias em várias portas
   - Evitar o utilizador receber a sua propria mensagem
   - As mensagems devem vir com o nome do utilizador no estilo "user@room: "
   - Mudar mensagem privada para se ficar a saber que foi privada
   - Controlo de erros para quando não esta loggedin ou registado
   - Se o user nao estiver loggedout, nao pode fazer logout
   - Meter a lógica dos supervisors
